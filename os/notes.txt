XV6

Initial setup
    boot loader in ROM loads kernel into memory at 0x80000000
        first set of instrs in .text of kernel are specified by linker ENTRY command (_entry)
    _entry 
        set up stack
        call C code at start
    start
        set mstatus
        set mepc to main's address
        set satp to 0 (turn off virtual address translation)
        delegate all interrupts/exceptions to supervisor mode
        turn on clock chip
        call mret (which jumps to address at mepc)
    main
        initialize devices and subsystems
        create a process and return to user space in that process 
        start shell on console
        system is up


Syscalls
  read
      read() -> fileread() -> devsw[CONSOLE].read() -> consoleread() -> wait
      until cons.buf is filled up by consoleintr(), which also echoes chars back
      to user -> copy to user-space dst -> return to user process

  write
      write() -> filewrite() -> devsw[CONSOLE].write() -> consolewrite() ->
      uartputc() -> uartstart() -> send if THR has space; otherwise return, will
      be called again via interrupt when THR is ready to accept [uartintr() -> uartstart()]

  // console related traps <-> consoleintr()
  trap handler -> devintr() -> PLIC via scause -> uartintr() -> consoleintr()

TRAPS - events that cause CPU to set aside ordinary execution of instructions
  types: syscall, exception, interrupt
  
  transparent handling of traps (save state -> handle trap -> restore state)

  handling proceeds in four stages
    hardware action taken by RISC-V CPU
    some assembly instructions that prepare the way for kernel C code
    C function that decides what to do with the trap
    syscall or device-driver routine

  separate code for three distinct cases: 
    traps from used space: syscall, device interrupt or exception
      uservec() -> usertrap() -> usertrapret() -> userret()
    traps from kernel space: device interrupt or exception
    timer interrupts
  
Memory managemenet
  page-grained allocation
  byte-grained allocation
  managing mmu

  

NS16450 UART
https://www.lammertbies.nl/comm/info/serial-uart
    
