-----------------------------------------------------------------------------
prec    assoc   purpose     op
-----------------------------------------------------------------------------
1       left                ,
2       right   asgn        =, *=, /=, +=, -=, %=, <<=, >>=, &=, ^=, |=
3       right   cond        ? :
4       left    logor       ||
5       left    logand      &&
6       left    inclor      |
7       left    exclor      ^
8       left    and         &
9       left    equal       ==, !=
10      left    rel         <, >, <=, >=
11      left    shift       <<, >>
12      left    add         +, -
13      left    mul         *, /, %
        left    cast        
14      left    unary       ++, --, &, *, -, ~, !
15      left    postfix     ++, --, ->, .
                primary
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
stmt                                             Edecl fields
-----------------------------------------------------------------------------
label_stmt
    ident ':' stmt                              | value then
    'case' expr ':' stmt                        | cond then
    'default' ':' stmt                          | then

compound_stmt
    '{' block '}'                               | body

expression_stmt
    expr ';'                                    | value 

selection_stmt
    'if' '(' expr ')' stmt                      | cond then
    'if' '(' expr ')' stmt 'else' stmt          | cond then els
    'switch' '(' expr ')' stmt                  | cond then

iteration_stmt
    'while' '(' expr ')' stmt                   | cond then
    'do' stmt 'while' '(' expr ')' ';'          | then cond
    'for' '(' expr ';' expr ';' expr ')' stmt   | init cond inc then
    'for' '(' decl expr ';' expr ')' stmt       | init cond inc then

jump_stmt
    'goto' ident ';'                            | value
    'continue' ';'                              | 
    'break' ';'                                 | 
    'return' expr ';'                           | value
-----------------------------------------------------------------------------


A Survey of Compiler Testing
https://sci-hub.ru/https://dl.acm.org/doi/fullHtml/10.1145/3363562

Previous interesting compilers
https://en.wikipedia.org/wiki/PL/8

COMPILER TESTING
https://stackoverflow.com/questions/1104922/compiler-test-cases-or-how-to-test-a-compiler
https://gcc.gnu.org/onlinedocs//gccint/C-Tests.html
https://software-dl.ti.com/ccs/esd/documents/sdto_cgt_compiler_validations.html
https://users.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf

https://github.com/c-testsuite/c-testsuite/tree/master
https://github.com/nlsandler/write_a_c_compiler
https://github.com/llvm/llvm-test-suite/tree/main/SingleSource/UnitTests
https://github.com/csmith-project/creduce [reduce large C/C++ programs into small ones that have the same behavior]
https://github.com/csmith-project/csmith [random generator of C programs]

Challenges
1. One challenge is the lack of a formal specification of what exactly a compiler is supposed to do
2. Another challenge for testing is the semantic richness of the input and output languages that compilers deal with
3. A third important challenge is that compilers have various options and features

Properties that simplify the problem of validating their correctness
1. One such property is that the inputs to compilers are written in a programming language, i.e., the space of possible inputs is clearly defined by the language grammar
2. Another property that eases compiler testing is that the semantics of the source language are usually specified
3. The fact that for most popular programming languages, there are multiple supposedly equivalent implementations, which compiler testing can exploit as an oracle for differential testing 

