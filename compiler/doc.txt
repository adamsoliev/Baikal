-----------------------------------------------------------------------------
DESCRIPTION OF CURRENT STATE: source -> tokens -> AST -> RISC-V
-----------------------------------------------------------------------------
Goals
    learning about compiler implementation in general and about code generation in particular 
    (how high level structures are translated to assembly) 

Minimal memory management
    it usually callocs away, only freeing when necessary (e.g., register names)

Minimal symbol management
    it uses a single hash table with string/symbol key-value pair. symbol is a struct that has value and offset fields

Scanning
    except keywords/numbers, which are handled using library functions, it is a hand-coded scanner that examines 
    the source char by char, generating respective tokens

Parsing 
    recursive descend parser; all EXPRESSIONS and STATEMENTS are implemented; binary expressions are handled using 
    a table-driven approach, which is both efficient and less verbose. missing major pieces are (more complex) 
    DECLARATIONS, TYPES except INT (type are represented using bit-string) and nice error messages/graceful handling  

AST/Semantic analysis
    again, could be improved. declaration/statement combo is handled via one struct type, which simplified parsing and 
    aided in the codegen. type checking is left out since the only handled type is INT. some name resolution is enforced 
    by the hash table 

Codegen
    high level constructs in AST are translated as straighforwardly as it possible  
-----------------------------------------------------------------------------


**************************************************************************************************
Parsing
**************************************************************************************************

-----------------------------------------------------------------------------
prec    assoc   purpose     op
-----------------------------------------------------------------------------
1       left                ,
2       right   asgn        =, *=, /=, +=, -=, %=, <<=, >>=, &=, ^=, |=
3       right   cond        ? :
4       left    logor       ||
5       left    logand      &&
6       left    inclor      |
7       left    exclor      ^
8       left    and         &
9       left    equal       ==, !=
10      left    rel         <, >, <=, >=
11      left    shift       <<, >>
12      left    add         +, -
13      left    mul         *, /, %
        left    cast        
14      left    unary       ++, --, &, *, -, ~, !
15      left    postfix     ++, --, ->, .
                primary
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
stmt                                             Edecl fields
-----------------------------------------------------------------------------
label_stmt
    ident ':' stmt                              | value then
    'case' expr ':' stmt                        | cond then
    'default' ':' stmt                          | then

compound_stmt
    '{' block '}'                               | body

expression_stmt
    expr ';'                                    | value 

selection_stmt
    'if' '(' expr ')' stmt                      | cond then
    'if' '(' expr ')' stmt 'else' stmt          | cond then els
    'switch' '(' expr ')' stmt                  | cond then

iteration_stmt
    'while' '(' expr ')' stmt                   | cond then
    'do' stmt 'while' '(' expr ')' ';'          | then cond
    'for' '(' expr ';' expr ';' expr ')' stmt   | init cond inc then
    'for' '(' decl expr ';' expr ')' stmt       | init cond inc then

jump_stmt
    'goto' ident ';'                            | value
    'continue' ';'                              | 
    'break' ';'                                 | 
    'return' expr ';'                           | value
-----------------------------------------------------------------------------


**************************************************************************************************
RISC-V ASSEMBLY
**************************************************************************************************

-------------------------------------------------------------------
1. Put parameters in a place where the procedure can access them.
x10 - x17       : param registers
-------------------------------------------------------------------
2. Transfer control to the procedure.
jal x1, lable   : jump to label and write return address to x1
-------------------------------------------------------------------
3. Acquire the storage resources needed for the procedure.
allocate space in stack and move stack/frame pointers accordingly
-------------------------------------------------------------------
4. Perform the desired task.
-------------------------------------------------------------------
5. Put the result value in a place where the calling program can access it.
x10 - x17       : param registers
-------------------------------------------------------------------
6. Return control to the point of origin, since a procedure can be called from
several points in a program.
jalr x0, 0(x1)  : return from a function
-------------------------------------------------------------------

Register        ABI Name        Description             Saver           Preserved on call?
x0              zero            Zero constant           —               n.a
x1              ra              Return address          Callee          yes
x2              sp              Stack pointer           Callee          yes
x3              gp              Global pointer          —               yes
x4              tp              Thread pointer          —               yes
x5-x7           t0-t2           Temporaries             Caller          no
x8              s0/fp           Saved/frame pointer     Callee          yes
x9              s1              Saved register          Callee          yes
x10-x11         a0-a1           Fn args/return values   Caller          no
x12-x17         a2-a7           Fn args                 Caller          no
x18-x27         s2-s11          Saved registers         Callee          yes
x28-x31         t3-t6           Temporaries             Caller          no


Convention
1. Registers 
        ABI     Preserved on call?
        zero    yes
        ra      yes
        sp      yes
        gp      yes
        tp      yes
        t0-t6   no      Temporaries
        s0-s11  yes     Saved 
        a0-a7   no      Args/Return
2. Function calls
        function calls are made using
                jal ra label     (jal label)
                jalr ra rd imm   (jalr rd when imm is 0)
                both essentially do:
                        ra = PC + 4
                        PC += label offset || rd + imm
        * standard jump in a loop uses x0 instead of ra (doesn't save return address)
                jal x0 label     (j label)
                jalr x0 rd imm   (jr rd when imm is 0)
3. Entering/exiting a function (prologue/epilogue)
        • sp will be preserved (unless we store return values on the stack)
        • All s registers will be preserved
        • Function will return to the address stored in ra, assuming no abnormal execution

        • prologue
        Decrement sp by number of used 'saved registers' + local variable space
        Store any saved registers used
        Store ra if a function call is made        

        • epilogue
        Reload any saved registers used
        Reload ra (if necessary)
        Increment sp back to previous value
        Jump back to return address

* Using Convention to Debug
        • Check that you stored ra properly. For recursion make sure you link ra
        for each recursive call. You can test this by putting a break point at the
        end of the epilogue and seeing where you return.
        • Check that you don’t use any t registers after a function call.
        • Check that sp enters and exits with the same value.
        • Check the number of times you enter the prologue equals the number of times you enter the epilogue.
        • Make sure you restore every register you modified.


ACTIVATION RECORD
-----------------------------------------------------------------------------
 fp ->   -----------
        | incoming  |   first 8 args are passed in a0-a7
        |   args    |   rest are passed here
         -----------
        |  ra (old) |   so that we can return
         -----------
        |  fp (old) |   so that we have idea of prev AR's fp
         -----------|
        |   s1-s11  |   so that we have some regs preserved during funcall
         -----------|
        |   locals  |   for local calculations
 sp ->   -----------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
GENERAL NOTES 
-----------------------------------------------------------------------------
In 1951, Grace Murray Hopper wrote A0, considered by some to be the ﬁrst compiler

Changes in languages and computing environments pose a variety of challenges that require compiler writers to adapt their practices to obtain best results
    object orientation, late binding of names to types and classes, dynamic loading, and polymorphism
    freeze on single-thread performance -> improvements in architecture and parallelism

Division of a compiler into three phases, a front end, an optimizer, and a back end, creates a useful separation of concerns
    FE works to understand the source program and record the results of that analysis in IR form. Should run in O(n) time
    OPTIMIZER tries to improve the IR so that it produces a more efficient execution. 
    BE maps the optimized IR program onto the target machine’s ISA in a way that makes efficient use of resources

Symbol tables
    symbol tables, structure layout tables and constant tables
    each table should have:
        mapping mechanism (from name to repository): 
            - hashmap
            - multiset discrimination
        repository: 
            - should be contiguous/block contiguous
            - each should have enough information to rebuild the lookup structure (e.g., for expansion)
            - should support changes to the search path (going in/out of scope)
    
    Example implementation 
                                 N              N              N
    --------          -------- <---> -------- <---> -------- <---> --------                                                                                      
   |        |        |        |     |        |     |        |     |        |                                                                                     
   | global |        |  per   |     |        |     |        |     |        |                                                                                     
   | symbol |        |function|     |        |     |        |     |        |                                                                                     
   |  table |        |        |     |        |     |        |     |        |                                                                                     
   |        |        |        |     |        |     |        |     |        |                                                                                     
    --------          --------       --------       --------       --------                                                                                      
                      CH |           CH |           CH |                                                                               
                         v              v              v                                                                               
                      --------       --------       --------                                                                           
                     |        |     |        |     |        |                                                                           
                     |        |     |        |     |        |                                                                           
                     |        |     |        |     |        |                                                                        
                     |        |     |        |     |        |                                            
                     |        |     |        |     |        |                                            
                      --------       --------       --------                                             
                       N |                                                                                                       
                         v                                                                                                       
                      --------                                            
                     |        |
                     |        |
                     |        |
                     |        |
                     |        |
                      -------- 

Type system (a type is just a collection of properties)
    base type and compound/constructed types (arrays, strings, structs)
    type equivalence
        name equivalence
        structural equivalence
    type inference for expressions

Storage layout
    automatic (often placed in functon's activation record)
    static (all are lumped into a single static data area, each having its offset)
    irregular (data on heap)
    temporary values (might be in AR or memory, depending on how often it is used)

Code Shape
    short-circuit evaluation of boolean exprs - after each evaluation, if it is false, jump to end of that stmt
    if-then-else
        three-block scheme (then and else parts are large)
        contional move/predicated execution (otherwise)
    switch/case
        a linear search, a computed address, and a binary search

-----------------------------------------------------------------------------
BACKEND
-----------------------------------------------------------------------------
It’s usually best (easiest) to solve a problem at the highest level of abstraction possible
    ASSEMBLY    => can eliminate a few redundant instructions
    LINEAR IR   => can speed up a long code sequence with smart register allocation
    DAG/AST     => can eliminate entire chunks of unused code

Analyses
    Control-flow ----+
                     |--> SSA form encodes both, easing both analyses and transformations
    Data-flow    ----+

Opportunities for optimization arise from 
    implementation of source-language abstractions
    target machine

Optimizations can be done at 
    local (single block - where 1. stmts are executed sequencially and 2. if one stmt executes, whole block executes)
    regional (multiple blocks - e.g., loop)
    global (single function)
    interprocedural levels (whole program - set of functions)

    high-level
        Constant Folding - reduce expressions to constants
        Strength Reduction - convert special case(s) of an expensive operation to a cheaper one
        Loop Unrolling
        Code Hoisting - move unchanging expression code (constant) outside of the loop
        Function Inlining
        Dead Code Detection and Elimination
    low-level
        Peephole Optimizations - replace a small section of code with simplier one (e.g., redundant load elimination)
        Instruction Selection - replace subtrees in to-be-compiled program's tree with respective subtrees built from instructions  
        Register Allocation
    * beware of optimizations that have clear benefits and unclear costs

INSTRUCTION SELECTION
  converting from tree structured IR to sequence of instructions
    – create temporary locations to store values
    – choose which operations 
      • can combine or breakup original operations
  match portions of tree and convert to triple

REGISTER ALLOCATION
  map important vars & temps in assembly to either registers or slots in activation frame by
    - assignment (assign to vars & temps registers)
    - spilling (if can't assign to a register, assign a slot in activation frame)
    - coalescing (eliminate moves a<->b and map both a&b to the same location)

  solutions
    - interference graph -> attempt register allocation by searching for a K-coloring
      * NP-complete but a linear-time simplification algorithm works well in practice
  
  rules
    vars & temps with interfering live ranges may not be assigned to the same machine register

INSTRUCTION SCHEDULING
    reorder operations to reflect the target machine’s specific performance constraints

STATIC SINGLE ASSIGNMENT
  each name is assigned in only one location
  simplifies many optimizations
