Design
1.
                  ------------
source files  -> | scan       | -> ll of tokens
                 |            | -> symbol table
                  ------------

2.
                  ------------
ll of tokens  -> | parse      | -> AST
symbol table  -> |            | -> modified symbol table
                  ------------

3.                
                  ------------
AST           -> | codegen    | -> RISC-V assembly
symbol table  -> |            |
                  ------------

4.
                  ------------
assembly      -> | opt passes | -> optimized assembly
                 |            |
                  ------------

Token 
    uint64_t
    kind    // 8   bits - token kind (up to 256 kinds)
    row     // 16  bits - row (up to 65536 lines per a file)                               [1]
    ifn     // 16  bits - index into the filenames array (up to 65536 files per project)   [2]
    isn     // 16  bits - index into the symbol table (up to 65536 symbols per project)
    ---     // 8   bits - unused
            [1] - longest file in linux has 56,473 LOC
            [2] - linux has ~33k .c files

Constants array 
     --------------------
    |       |       |    ...
     --------------------
     It is an array of pointers to 'union con'. For a given constant token, its value is 
     stored at an index, which is in turn stored in the 'isn' field of the token.

Symbol table
     --------------------------------------------------------------
    | name | type | size | dimention | params | body | decl | uses |
     --------------------------------------------------------------
    |      |      |      |           |        |      |      |      |
    ...

    name : char *
    token:  
    type[1] : uint64_t 
        0x
        00,     // unused for now 
        00,     // unused for now
        00,     // pointer types (ptr to basic type | ptr to array | ptr to function | NULL?)
        00,     // array types (array of basic type | array of pointers)
        00,     // const | inline
        00,     // storage-class specifiers 
        00,     // short | long | signed | unsigned
        00      // basic types (void, char, int, float, double, struct, union, enum)
    size :      // total # of bytes the symbol takes
    params :    // linkedlist of function parameters
    body :      // a pointer to compound statement of function

A program 
    ExtDecl -> ExtDecl -> ExtDecl -> ...    // each ExtDecl is either declaration or function definition

Performance
    Lex & Parse     - 10 MLOC/s (MLOC - million lines of code)
    Codegen         - 0.1 MLOC/s

    Average 100 ns per line to lex & parse
    Average 1 ms per line to semantic analysis


[1] Types supported
    void
    basic types
        char
        int
            signed integer types
                standard: signed char, short, int, long, long long (since C99)
                /* ignored */ extended: implementation defined, e.g. __int128 (since C99)
            unsigned integer types
                standard: _Bool, (since C99) unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long (since C99)
                /* ignored */ extended: implementation-defined, e.g. __uint128 (since C99)
        floating-point types
            float, double, long double
            /* ignored */ decimal float: _Decimal32, _Decimal64, _Decimal128 (since C23)
        /* ignored */ complex types: float _Complex, double _Complex, long double _Complex
        /* ignored */ imaginary types: float _Imaginary, double _Imaginary, long double _Imaginary (since C99)
    enum                        
    derived types
        array
        structure               
        union                   
        function 
        pointer 
        /* ignored */ atomic (since C11)
